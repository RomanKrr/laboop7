#include "Monitor.h"

Monitor::Monitor(string b, string m, int resW, int resH, float size, bool curved)
    : brand(b), model(m), resolutionWidth(resW), resolutionHeight(resH), screenSize(size), isCurved(curved) {}


Monitor Monitor::operator+(const Monitor& other) const {
    return Monitor(
        brand + " & " + other.brand,                  // ??'??????? ???????
        model + " & " + other.model,                  // ??'??????? ???????
        resolutionWidth + other.resolutionWidth,      // ???? ??????
        resolutionHeight + other.resolutionHeight,    // ???? ??????
        screenSize + other.screenSize,                // ???? ???????? ???????
        isCurved || other.isCurved                    // ???? ?? ????????? ???????? -> ????????? ??? ????????
    );
}

// ?????????? ????????? '-'
Monitor Monitor::operator-(const Monitor& other) const {
    return Monitor(
        brand + " - " + other.brand,                  // ??'??????? ??????? ? "-"
        model + " - " + other.model,                  // ??'??????? ??????? ? "-"
        resolutionWidth - other.resolutionWidth,      // ??????? ??????
        resolutionHeight - other.resolutionHeight,    // ??????? ??????
        screenSize - other.screenSize,                // ??????? ???????? ???????
        false                                         // ??????? ?? ??? ????? ??? ??????????
    );
}


Monitor Monitor::operator*(const Monitor& other) const {
    return Monitor(
        brand + " * " + other.brand,                  // ??'??????? ??????? ? "*"
        model + " * " + other.model,                  // ??'??????? ??????? ? "*"
        resolutionWidth * other.resolutionWidth,      // ???????? ??????
        resolutionHeight * other.resolutionHeight,    // ???????? ??????
        screenSize * other.screenSize,                // ???????? ??????? ??????
        isCurved && other.isCurved                    // ???? ?????? ???????? ???????
    );
}

// ?????????? ????????? '='
Monitor& Monitor::operator=(const Monitor& other) {
    if (this != &other) { // ????????? ?? ??????????????
        brand = other.brand;
        model = other.model;
        resolutionWidth = other.resolutionWidth;
        resolutionHeight = other.resolutionHeight;
        screenSize = other.screenSize;
        isCurved = other.isCurved;
    }
    return *this;
}

// ?????????? ????????? '+='
Monitor& Monitor::operator+=(const Monitor& other) {
    resolutionWidth += other.resolutionWidth;
    resolutionHeight += other.resolutionHeight;
    screenSize += other.screenSize;
    return *this;
}

// ?????????? ????????? '-='
Monitor& Monitor::operator-=(const Monitor& other) {
    resolutionWidth -= other.resolutionWidth;
    resolutionHeight -= other.resolutionHeight;
    screenSize -= other.screenSize;
    return *this;
}

// ?????????? ????????? '*='
Monitor& Monitor::operator*=(const Monitor& other) {
    resolutionWidth *= other.resolutionWidth;
    resolutionHeight *= other.resolutionHeight;
    screenSize *= other.screenSize;
    return *this;
}

// ?????????? ????????? '[]'
int Monitor::operator[](int index) {
    if (index == 0) {
        return resolutionWidth;
    }
    else if (index == 1) {
        return resolutionHeight;
    }
    return -1; // ???? ?????? ???????????
}


