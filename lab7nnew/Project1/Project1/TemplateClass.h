#pragma once
#include <iostream>
#include <vector>
#include <string>

using namespace std;

// ?????? ????? ? ?'????? ???????????
template <typename T1, typename T2, typename T3, typename T4, typename T5>
class TemplateClass {
private:
    T1 deviceName;
    T2 brand;
    T3 year;
    T4 status;
    T5 extraInfo;

public:
    TemplateClass(T1 name, T2 br, T3 yr, T4 st, T5 info)
        : deviceName(name), brand(br), year(yr), status(st), extraInfo(info) {}

    void displayDeviceInfo() {
        cout << "Device Name: " << deviceName << endl;
        cout << "Brand: " << brand << endl;
        cout << "Year: " << year << endl;
        cout << "Status: " << status << endl;
        cout << "Extra Info: " << extraInfo << endl;
    }

    // ????? ??? ?????????? ???? ??????? ? ???????
    bool isOlderThan(T3 comparisonYear) {
        return year < comparisonYear;
    }

    // ????? ??? ????????? ???????
    void updateStatus(T4 newStatus) {
        status = newStatus;
    }

    // ????????? ????? ??? ?????????? ????????? ?????????
    static int countDevices(const vector<TemplateClass>& devices) {
        return devices.size();
    }
};